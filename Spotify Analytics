-- For this project, I downloaded Spotify data from Kaggle, created a table to insert Spotify data into, then I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Exploring the data after inserting data using the following SQL:

-- Which song is the shortest in duration?
SELECT artist_name, track_name, min(duration_ms)
FROM BIT_DB.Spotifydata;

-- Who are the top 5 artists based on popularity?
SELECT artist_name, popularity
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY popularity desc
LIMIT 5;

-- What's the average loudness by artist?
SELECT artist_name, AVG(loudness)
FROM BIT_DB.Spotifydata
GROUP BY artist_name;

-- List the top 10 songs in danceability and their tempo.
SELECT artist_name, track_name, danceability, tempo
FROM BIT_DB.Spotifydata
ORDER BY danceability desc
LIMIT 10;

-- Which artist and song has the most energy?
SELECT artist_name, track_name, energy
FROM BIT_DB.Spotifydata
ORDER BY energy
LIMIT 1;

-- List all songs longer than 230000ms.
SELECT artist_name, track_name, duration_ms
FROM BIT_DB.Spotifydata
WHERE duration_ms > 230000;
