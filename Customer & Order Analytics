#In this SQL, I'm querying a database with multiple tables to quantify statistics about customer and order data.

-- How many many unique orders were placed in January?
SELECT COUNT(distinct orderID)
  FROM JanSales
  WHERE length(orderID) = 6
  AND orderID <> 'Order ID';

-- How many of those orders were for an iPhone?
SELECT COUNT(distinct orderID)
  FROM JanSales
  WHERE Product = 'iPhone'
  AND length(orderID) = 6
  AND orderID <> 'Order ID';
  
-- Select the customer account numbers for all the orders that were placed in February.
SELECT distinct acctnum
  FROM customers
  INNER JOIN FebSales
  ON FebSales.orderID = customers.order_id
  WHERE length(orderID) = 6
  AND orderID <> 'Order ID';
  
-- Which product was the cheapest one sold in January, and what was the price?
SELECT MIN(price), Product
  FROM JanSales
  GROUP BY product, price
  ORDER BY price ASC
  LIMIT 1;

-- What is the total revenue for each product sold in January?
SELECT product, SUM(quantity)*price AS Revenue
  FROM BIT_DB.JanSales
  GROUP BY product;

-- Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?
SELECT product, SUM(quantity), SUM(quantity)*price AS Revenue
  FROM FebSales
  WHERE location = '548 Lincoln St, Seattle, WA 98101'
  GROUP BY product;
  
-- How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?
SELECT COUNT(distinct acctnum), AVG(quantity*price)
  FROM FebSales
  LEFT JOIN customers
  ON FebSales.orderID = customers.order_id
  WHERE FebSales.quantity>2
  AND length(orderID) = 6
  AND orderID <> 'Order ID';

-- Show all orders placed between February 13th, 2019 and February 18th, 2019.
SELECT orderdate
FROM BIT_DB.FebSales
WHERE orderdate between '02/13/19 00:00' AND '02/18/19 00:00';

-- Where was an order placed for on February 18th, 2019 at 1:35?
SELECT location
FROM BIT_DB.FebSales
WHERE orderdate = '02/18/19 01:35';

-- How many orders were placed on February 18th, 2019?
SELECT sum(quantity)
FROM BIT_DB.FebSales
WHERE orderdate like '02/18/19%';

-- List all types of batteries sold in February.
SELECT distinct Product
FROM BIT_DB.FebSales
WHERE Product like '%Batteries%';

-- Which products are priced ending in .99?
SELECT distinct Product, Price
FROM BIT_DB.FebSales
WHERE Price like '%.99';

-- List all products sold in Los Angeles in February, and include how many of each were sold.
SELECT Product, sum(quantity)
FROM BIT_DB.FebSales
WHERE location like '%Los Angeles%'
GROUP BY Product;

-- Which locations in New York received at least 3 orders in January, and how many orders did they each receive?
SELECT distinct location, count(orderID)
FROM JanSales
WHERE location like '%NY%'
AND length(orderid) = 6
AND orderid <> 'Order ID'
GROUP BY location
HAVING count(orderID) >2;

-- How many of each type of headphone were sold in February?
SELECT Product, sum(Quantity) as Quantity
FROM BIT_DB.FebSales
WHERE Product like '%headphone%'
GROUP BY Product;

-- What was the average amount spent per account in February?
SELECT sum(price*quantity)/count(customers.acctnum)
FROM BIT_DB.FebSales
LEFT JOIN BIT_DB.customers
ON FebSales.orderID = customers.order_ID
WHERE length(orderid) = 6
AND orderid <> 'Order ID';

-- What was the average quantity of products purchased per account in February?
SELECT sum(quantity)/count(customers.acctnum)
FROM BIT_DB.FebSales
LEFT JOIN BIT_DB.customers
ON FebSales.orderID = customers.order_ID
WHERE length(orderid) = 6
AND orderid <> 'Order ID';

-- Which product brought in the most revenue in January and how much revenue did it bring in total?
SELECT Product, sum(Quantity*price)
FROM JanSales
GROUP BY Product
ORDER BY sum(Quantity*price) desc
LIMIT 1;
